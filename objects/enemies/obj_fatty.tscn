[gd_scene load_steps=34 format=3 uid="uid://ce6xxmm6gkqmt"]

[ext_resource type="Texture2D" uid="uid://rhgi4mo1ghph" path="res://sprites/enemies/spr_fatty.png" id="1_577vo"]
[ext_resource type="Texture2D" uid="uid://v5wth00s0xms" path="res://icon.svg" id="2_ua5cb"]

[sub_resource type="GDScript" id="GDScript_curqv"]
resource_name = "Gord√£o Data"
script/source = "extends CharacterBody2D

@onready var difficulty_factor := pow(Game.wave, 2)

@export var chase_spd:int = 150
@export var scale_factor:float = 1.0
var spd := 0.0

@export var max_hp := 5.0

var hp := .0

@onready var direction = 1:
	set(value):
		if value == 0: return
		direction = value
		sprite.scale.x = direction * scale_factor

var invincible = false
var threw_player_up = false
var throw_cooldownTime = 60
var throw_cooldown = throw_cooldownTime

@onready var state_machine = $States
@onready var sprite = $Sprite2D
@onready var anim = $AnimationTree
@onready var playback = anim.get(\"parameters/playback\")

@onready var player:CharacterBody2D = get_tree().current_scene.player

func _ready():
	var room = get_tree().current_scene
	
	max_hp += .8 * difficulty_factor
	
	hp = max_hp
	
	if player:
		position = Vector2(randf_range(max(player.position.x-64, room.room_size.position.x), min(player.position.x+64, room.room_size.end.x)), 0)
		direction = -sign(position.x-player.position.x)

func apply_gravity(): velocity.y += Game.GRAVITY * get_physics_process_delta_time()

func apply_accel(): velocity.x = spd * direction

func apply_fric():
	if abs(velocity.x) < 1: velocity.x = 0
	velocity.x = lerp(velocity.x, 0, .15)

func lerp_sprite_scale(value:Vector2, weigth=.2): sprite.scale = sprite.scale.lerp(value * scale_factor * sprite.scale.sign(), weigth)
func set_sprite_scale(value:Vector2): sprite.scale = Vector2(value.x * direction, value.y) * scale_factor

func _process(delta: float) -> void:
	var collisions = $Hurtbox.get_overlapping_bodies()
	
	invincible = round(position.direction_to(player.position).x) == direction
	
	if collisions.is_empty(): return
	
	if threw_player_up:
		throw_cooldown -= 60*delta
		
		if throw_cooldown <= 0:
			threw_player_up = false
			throw_cooldown = throw_cooldownTime
	
	else:
		var body = collisions[0]
		if body.name == \"obj_player\" && !body.invincible && !state_machine.state in [\"spawn\", \"hit\", \"dead\"]:
			threw_player_up = true
			direction = sign(body.position.x-position.x)
			state_machine.change_state(\"attack\")
			body.state_machine.change_state(\"launched\", [position.x, -1000])
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_edjfn"]

[sub_resource type="RectangleShape2D" id="1"]
size = Vector2(18, 18)

[sub_resource type="RectangleShape2D" id="7"]
size = Vector2(16, 32)

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_6ba17"]
animation = &"attack"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_cvjno"]
animation = &"dead"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_oam0m"]
animation = &"hit"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_d4wb0"]
animation = &"idle"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_2cs77"]
animation = &"walk"

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_oi702"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_snru5"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_cgj3r"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_womxr"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_xkax3"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_c3ugb"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_qqd77"]

[sub_resource type="AnimationNodeStateMachine" id="AnimationNodeStateMachine_xxnn3"]
states/attack/node = SubResource("AnimationNodeAnimation_6ba17")
states/attack/position = Vector2(326, -9.12294)
states/dead/node = SubResource("AnimationNodeAnimation_cvjno")
states/dead/position = Vector2(326, 288)
states/hit/node = SubResource("AnimationNodeAnimation_oam0m")
states/hit/position = Vector2(326, 184)
states/idle/node = SubResource("AnimationNodeAnimation_d4wb0")
states/idle/position = Vector2(326, 100)
states/walk/node = SubResource("AnimationNodeAnimation_2cs77")
states/walk/position = Vector2(441, 100)
transitions = ["idle", "walk", SubResource("AnimationNodeStateMachineTransition_oi702"), "walk", "idle", SubResource("AnimationNodeStateMachineTransition_snru5"), "Start", "idle", SubResource("AnimationNodeStateMachineTransition_cgj3r"), "idle", "hit", SubResource("AnimationNodeStateMachineTransition_womxr"), "hit", "dead", SubResource("AnimationNodeStateMachineTransition_xkax3"), "idle", "attack", SubResource("AnimationNodeStateMachineTransition_c3ugb"), "attack", "idle", SubResource("AnimationNodeStateMachineTransition_qqd77")]
graph_offset = Vector2(0, 174.697)

[sub_resource type="Animation" id="Animation_t2b4t"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_te2lb"]
resource_name = "attack"
length = 0.4
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05, 0.1, 0.15, 0.2, 0.25),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [32, 33, 34, 35, 36, 37]
}

[sub_resource type="Animation" id="Animation_575jq"]
resource_name = "dead"
length = 1.55
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
}

[sub_resource type="Animation" id="Animation_kvo2f"]
resource_name = "hit"
length = 0.15
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05, 0.1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [48, 49, 50]
}

[sub_resource type="Animation" id="Animation_el0w7"]
resource_name = "idle"
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_2ka8d"]
resource_name = "walk"
length = 0.2
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05, 0.1, 0.15),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [20, 21, 22, 23]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_u7smo"]
_data = {
&"RESET": SubResource("Animation_t2b4t"),
&"attack": SubResource("Animation_te2lb"),
&"dead": SubResource("Animation_575jq"),
&"hit": SubResource("Animation_kvo2f"),
&"idle": SubResource("Animation_el0w7"),
&"walk": SubResource("Animation_2ka8d")
}

[sub_resource type="GDScript" id="GDScript_oe8mj"]
script/source = "extends StateMachine

func _anim_finished(anim_name):
	states[state].anim_finished(anim_name)
"

[sub_resource type="GDScript" id="GDScript_0g7kv"]
script/source = "extends State

func step(_d):
	host.move_and_slide()
	host.apply_gravity()

func conditions():
	if host.is_on_floor(): return [\"idle\"]
"

[sub_resource type="GDScript" id="GDScript_yxpqj"]
script/source = "extends State

func enter(_p=[]):
	host.velocity.x = 0
	
	if state_machine.previous_state == \"chase\": host.playback.travel(\"walk\")
	else: host.playback.travel(\"idle\")

func step(_d):
	host.apply_gravity()
	host.move_and_slide()

func conditions():
	if host.player.state_machine.state == \"pray\" && get_tree().current_scene.level_modulate.color == Color.BLACK:
		return [\"chase\"]

func anim_finished(anim_name):
	if anim_name == \"walk\": host.playback.travel(\"idle\")
"

[sub_resource type="GDScript" id="GDScript_vl60n"]
script/source = "extends State

@onready var tilemap:TileMapLayer = get_tree().current_scene.tilemap
@onready var used_cells = tilemap.get_used_cells()

func enter(_p=[]):
	host.spd = host.chase_spd
	
	host.threw_player_up = false
	host.throw_cooldown = host.throw_cooldownTime

func step(_d):
	host.direction = sign(tilemap.local_to_map(host.player.position).x - tilemap.local_to_map(host.position).x)
	host.apply_accel()
	host.apply_gravity()
	host.move_and_slide()
	
	if host.is_on_wall() && tilemap.local_to_map(host.player.position).x != tilemap.local_to_map(host.position).x:
		var current_position = tilemap.local_to_map(host.position)
		
		for y in 4:
			var test_position = current_position + Vector2i(1*host.direction, -y)
			
			if !test_position in used_cells:
				host.position.y = tilemap.map_to_local(test_position).y+8
				$Icon.global_position = tilemap.map_to_local(test_position)
				break

func conditions():
	if host.player.state_machine.state != \"pray\": return [\"idle\"]
"

[sub_resource type="GDScript" id="GDScript_pdpdn"]
script/source = "extends State

func enter(_p=[]):
	host.playback.travel(\"attack\")
	host.velocity.x = 0

func step(_d):
	host.apply_gravity()
	host.move_and_slide()

func anim_finished(anim_name):
	if anim_name == \"attack\":
		state_machine.change_state(\"idle\")
"

[sub_resource type="GDScript" id="GDScript_wfab8"]
script/source = "extends State

var dmgText = preload(\"res://objects/effects/obj_dmgtext.tscn\")

var delay_time = 60
var delay_counter = delay_time

func enter(p=[]):
	host.invincible = true
	host.velocity.x = 0
	
	var dmg = p[0]
	var dmgText_instance = dmgText.instantiate()
	var dmgText_color = \"\"
	
	if Game.weapon == \"axe\": dmg += dmg*(.1*Game.playerHitCount)
	
	if host.player.suddenDeath_active: dmg *= 2
	
	match p[1]:
		\"normal\":
			dmgText_color = \"[color=\\\"#ffaa5e\\\"]\"
		
		\"crit\":
			dmg *= Game.crit_dmg
			dmgText_color = \"[color=\\\"#ffecd6\\\"]Cr√≠tico!\\n\"
			
			if Game.weapon == \"sword\":
				if Game.weaponLevel == 0: dmg *= 1.5
				elif Game.weaponLevel >= 2: dmg *= 2
		
		\"magic\":
			dmg *= .5
			dmgText_color = \"[color=\\\"#8fd3ff\\\"]\"
			
			if Game.weapon == \"saber\":
				if Game.weaponLevel == 0: dmg += dmg*(1.2*(Game.mana/Game.mhp))
				
				elif Game.weaponLevel >= 2: dmg += dmg*(2.5*(Game.mana/Game.mhp))
	
	dmgText_instance.direction = -host.direction
	dmgText_instance.text = \"[center]\" + dmgText_color + str(dmg).pad_decimals(2)
	
	host.add_child(dmgText_instance)
	
	host.hp -= dmg

func step(d): delay_counter -= 60*d

func conditions():
	if host.hp <= 0: return [\"dead\"]
	else:
		host.playback.travel(\"hit\")
		if delay_counter <= 0: return [\"idle\"]

func exit():
	host.invincible = false
	delay_counter = delay_time
"

[sub_resource type="GDScript" id="GDScript_5jxx1"]
script/source = "extends State

var xp = preload(\"res://objects/effects/obj_xpparticle.tscn\")

func enter(_p=[]):
	host.playback.travel(\"dead\")
	
	var xpInst = xp.instantiate()
	
	xpInst.global_position = host.global_position if is_instance_valid(host) else Vector2.ZERO
	xpInst.amount = 2
	xpInst.z_index = 999
	get_tree().current_scene.add_child(xpInst)

func anim_finished(anim_name):
	if anim_name == \"dead\":
		host.queue_free()
"

[node name="obj_enemyFatty" type="CharacterBody2D"]
collision_layer = 4
script = SubResource("GDScript_curqv")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_edjfn")
texture = ExtResource("1_577vo")
centered = false
offset = Vector2(-16, -32)
hframes = 16
vframes = 5

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
self_modulate = Color(0, 0.764706, 1, 1)
position = Vector2(0, -9)
shape = SubResource("1")

[node name="Hurtbox" type="Area2D" parent="."]
visible = false
collision_layer = 0
collision_mask = 2
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hurtbox"]
position = Vector2(0, -16)
shape = SubResource("7")
debug_color = Color(0.999475, 0, 0.111879, 0.42)

[node name="AnimationTree" type="AnimationTree" parent="."]
root_node = NodePath(".")
tree_root = SubResource("AnimationNodeStateMachine_xxnn3")
anim_player = NodePath("AnimationPlayer")

[node name="AnimationPlayer" type="AnimationPlayer" parent="AnimationTree"]
libraries = {
"": SubResource("AnimationLibrary_u7smo")
}

[node name="States" type="Node" parent="."]
script = SubResource("GDScript_oe8mj")

[node name="spawn" type="Node" parent="States"]
script = SubResource("GDScript_0g7kv")

[node name="idle" type="Node" parent="States"]
script = SubResource("GDScript_yxpqj")

[node name="chase" type="Node" parent="States"]
script = SubResource("GDScript_vl60n")

[node name="Icon" type="Sprite2D" parent="States/chase"]
visible = false
position = Vector2(24, -8)
scale = Vector2(0.125, 0.125)
texture = ExtResource("2_ua5cb")

[node name="attack" type="Node" parent="States"]
script = SubResource("GDScript_pdpdn")

[node name="hit" type="Node" parent="States"]
script = SubResource("GDScript_wfab8")

[node name="dead" type="Node" parent="States"]
script = SubResource("GDScript_5jxx1")

[connection signal="animation_finished" from="AnimationTree" to="States" method="_anim_finished"]
